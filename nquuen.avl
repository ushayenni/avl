#include <stdio.h> 
#include <stdbool.h> 
 
#define N 4 
 
void printSolution(int board[N][N]) { 
    for (int i = 0; i < N; i++) { 
        for (int j = 0; j < N; j++)  
            printf("%d ", board[i][j]); 
        printf("\n"); 
    } 
} 
 
bool isSafe(int board[N][N], int row, int col) { 
    for (int i = 0; i < col; i++) 
        if (board[row][i]) return false; 
    for (int i=row, j=col; i>=0 && j>=0; i--, j--) 
        if (board[i][j]) return false; 
    for (int i=row, j=col; j>=0 && i<N; i++, j--) 
        if (board[i][j]) return false; 
    return true; 
} 
 
bool solveNQUtil(int board[N][N], int col) { 
    if (col >= N) return true; 
    for (int i = 0; i < N; i++) { 
        if (isSafe(board, i, col)) { 
            board[i][col] = 1; 
            if (solveNQUtil(board, col + 1)) return true; 
            board[i][col] = 0; 
        } 
    } 
    return false; 
} 
 
void solveNQ() { 
    int board[N][N] = {0}; 
    if (solveNQUtil(board, 0))  
        printSolution(board); 
    else  
        printf("No solution exists\n"); 
} 
 
int main() { 
    solveNQ(); 
    return 0; 
} 

